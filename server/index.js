const express = require('express')
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const port = 3000;

var fp = {
    "0":[
       "length",
       "innerWidth",
       "innerHeight",
       "scrollX",
       "pageXOffset",
       "scrollY",
       "pageYOffset",
       "screenX",
       "screenY",
       "screenLeft",
       "screenTop",
       "TEMPORARY",
       "n.maxTouchPoints"
    ],
    "1":[
       "devicePixelRatio",
       "PERSISTENT",
       "d.childElementCount",
       "d.ELEMENT_NODE",
       "d.DOCUMENT_POSITION_DISCONNECTED"
    ],
    "2":[
       "d.ATTRIBUTE_NODE",
       "d.DOCUMENT_POSITION_PRECEDING"
    ],
    "3":[
       "d.TEXT_NODE"
    ],
    "4":[
       "d.CDATA_SECTION_NODE",
       "d.DOCUMENT_POSITION_FOLLOWING"
    ],
    "5":[
       "d.ENTITY_REFERENCE_NODE"
    ],
    "6":[
       "d.ENTITY_NODE"
    ],
    "7":[
       "d.PROCESSING_INSTRUCTION_NODE"
    ],
    "8":[
       "n.deviceMemory",
       "d.COMMENT_NODE",
       "d.DOCUMENT_POSITION_CONTAINS"
    ],
    "9":[
       "d.nodeType",
       "d.DOCUMENT_NODE"
    ],
    "10":[
       "d.DOCUMENT_TYPE_NODE"
    ],
    "11":[
       "d.DOCUMENT_FRAGMENT_NODE"
    ],
    "12":[
       "n.hardwareConcurrency",
       "d.NOTATION_NODE"
    ],
    "16":[
       "d.DOCUMENT_POSITION_CONTAINED_BY"
    ],
    "32":[
       "d.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"
    ],
    "1050":[
       "outerHeight"
    ],
    "1920":[
       "outerWidth"
    ],
    "o":[
       "window",
       "self",
       "document",
       "location",
       "customElements",
       "history",
       "navigation",
       "locationbar",
       "menubar",
       "personalbar",
       "scrollbars",
       "statusbar",
       "toolbar",
       "frames",
       "top",
       "parent",
       "frameElement",
       "navigator",
       "external",
       "screen",
       "visualViewport",
       "clientInformation",
       "styleMedia",
       "trustedTypes",
       "performance",
       "crypto",
       "indexedDB",
       "sessionStorage",
       "localStorage",
       "scheduler",
       "chrome",
       "caches",
       "cookieStore",
       "launchQueue",
       "speechSynthesis",
       "globalThis",
       "JSON",
       "Math",
       "Intl",
       "Atomics",
       "Reflect",
       "console",
       "CSS",
       "WebAssembly",
       "GPUBufferUsage",
       "GPUColorWrite",
       "GPUMapMode",
       "GPUShaderStage",
       "GPUTextureUsage",
       "n.scheduling",
       "n.userActivation",
       "n.geolocation",
       "n.connection",
       "n.plugins",
       "n.mimeTypes",
       "n.webkitTemporaryStorage",
       "n.webkitPersistentStorage",
       "n.bluetooth",
       "n.clipboard",
       "n.credentials",
       "n.keyboard",
       "n.managed",
       "n.mediaDevices",
       "n.storage",
       "n.serviceWorker",
       "n.virtualKeyboard",
       "n.wakeLock",
       "n.ink",
       "n.hid",
       "n.locks",
       "n.mediaCapabilities",
       "n.mediaSession",
       "n.permissions",
       "n.presentation",
       "n.serial",
       "n.gpu",
       "n.usb",
       "n.windowControlsOverlay",
       "n.xr",
       "n.userAgentData",
       "d.location",
       "d.implementation",
       "d.documentElement",
       "d.body",
       "d.head",
       "d.images",
       "d.embeds",
       "d.plugins",
       "d.links",
       "d.forms",
       "d.scripts",
       "d.defaultView",
       "d.anchors",
       "d.applets",
       "d.scrollingElement",
       "d.featurePolicy",
       "d.children",
       "d.firstElementChild",
       "d.lastElementChild",
       "d.activeElement",
       "d.styleSheets",
       "d.fonts",
       "d.fragmentDirective",
       "d.timeline",
       "d.childNodes",
       "d.firstChild",
       "d.lastChild"
    ],
    "false":[
       "closed",
       "crossOriginIsolated",
       "credentialless",
       "originAgentCluster",
       "n.webdriver",
       "d.xmlStandalone",
       "d.hidden",
       "d.wasDiscarded",
       "d.prerendering",
       "d.webkitHidden",
       "d.fullscreen",
       "d.webkitIsFullScreen"
    ],
    "x":[
       "opener",
       "onsearch",
       "onappinstalled",
       "onbeforeinstallprompt",
       "onbeforexrselect",
       "onabort",
       "onbeforeinput",
       "onblur",
       "oncancel",
       "oncanplay",
       "oncanplaythrough",
       "onchange",
       "onclick",
       "onclose",
       "oncontextlost",
       "oncontextmenu",
       "oncontextrestored",
       "oncuechange",
       "ondblclick",
       "ondrag",
       "ondragend",
       "ondragenter",
       "ondragleave",
       "ondragover",
       "ondragstart",
       "ondrop",
       "ondurationchange",
       "onemptied",
       "onended",
       "onerror",
       "onfocus",
       "onformdata",
       "oninput",
       "oninvalid",
       "onkeydown",
       "onkeypress",
       "onkeyup",
       "onload",
       "onloadeddata",
       "onloadedmetadata",
       "onloadstart",
       "onmousedown",
       "onmouseenter",
       "onmouseleave",
       "onmousemove",
       "onmouseout",
       "onmouseover",
       "onmouseup",
       "onmousewheel",
       "onpause",
       "onplay",
       "onplaying",
       "onprogress",
       "onratechange",
       "onreset",
       "onresize",
       "onscroll",
       "onsecuritypolicyviolation",
       "onseeked",
       "onseeking",
       "onselect",
       "onslotchange",
       "onstalled",
       "onsubmit",
       "onsuspend",
       "ontimeupdate",
       "ontoggle",
       "onvolumechange",
       "onwaiting",
       "onwebkitanimationend",
       "onwebkitanimationiteration",
       "onwebkitanimationstart",
       "onwebkittransitionend",
       "onwheel",
       "onauxclick",
       "ongotpointercapture",
       "onlostpointercapture",
       "onpointerdown",
       "onpointermove",
       "onpointerrawupdate",
       "onpointerup",
       "onpointercancel",
       "onpointerover",
       "onpointerout",
       "onpointerenter",
       "onpointerleave",
       "onselectstart",
       "onselectionchange",
       "onanimationend",
       "onanimationiteration",
       "onanimationstart",
       "ontransitionrun",
       "ontransitionstart",
       "ontransitionend",
       "ontransitioncancel",
       "onafterprint",
       "onbeforeprint",
       "onbeforeunload",
       "onhashchange",
       "onlanguagechange",
       "onmessage",
       "onmessageerror",
       "onoffline",
       "ononline",
       "onpagehide",
       "onpageshow",
       "onpopstate",
       "onrejectionhandled",
       "onstorage",
       "onunhandledrejection",
       "onunload",
       "ondevicemotion",
       "ondeviceorientation",
       "ondeviceorientationabsolute",
       "onbeforematch",
       "onbeforetoggle",
       "oncontentvisibilityautostatechange",
       "onscrollend",
       "n.doNotTrack",
       "d.doctype",
       "d.xmlEncoding",
       "d.xmlVersion",
       "d.currentScript",
       "d.onreadystatechange",
       "d.all",
       "d.onpointerlockchange",
       "d.onpointerlockerror",
       "d.onbeforecopy",
       "d.onbeforecut",
       "d.onbeforepaste",
       "d.onfreeze",
       "d.onprerenderingchange",
       "d.onresume",
       "d.onsearch",
       "d.onvisibilitychange",
       "d.onfullscreenchange",
       "d.onfullscreenerror",
       "d.webkitCurrentFullScreenElement",
       "d.webkitFullscreenElement",
       "d.onwebkitfullscreenchange",
       "d.onwebkitfullscreenerror",
       "d.rootElement",
       "d.pictureInPictureElement",
       "d.onbeforexrselect",
       "d.onabort",
       "d.onbeforeinput",
       "d.onblur",
       "d.oncancel",
       "d.oncanplay",
       "d.oncanplaythrough",
       "d.onchange",
       "d.onclick",
       "d.onclose",
       "d.oncontextlost",
       "d.oncontextmenu",
       "d.oncontextrestored",
       "d.oncuechange",
       "d.ondblclick",
       "d.ondrag",
       "d.ondragend",
       "d.ondragenter",
       "d.ondragleave",
       "d.ondragover",
       "d.ondragstart",
       "d.ondrop",
       "d.ondurationchange",
       "d.onemptied",
       "d.onended",
       "d.onerror",
       "d.onfocus",
       "d.onformdata",
       "d.oninput",
       "d.oninvalid",
       "d.onkeydown",
       "d.onkeypress",
       "d.onkeyup",
       "d.onload",
       "d.onloadeddata",
       "d.onloadedmetadata",
       "d.onloadstart",
       "d.onmousedown",
       "d.onmouseenter",
       "d.onmouseleave",
       "d.onmousemove",
       "d.onmouseout",
       "d.onmouseover",
       "d.onmouseup",
       "d.onmousewheel",
       "d.onpause",
       "d.onplay",
       "d.onplaying",
       "d.onprogress",
       "d.onratechange",
       "d.onreset",
       "d.onresize",
       "d.onscroll",
       "d.onsecuritypolicyviolation",
       "d.onseeked",
       "d.onseeking",
       "d.onselect",
       "d.onslotchange",
       "d.onstalled",
       "d.onsubmit",
       "d.onsuspend",
       "d.ontimeupdate",
       "d.ontoggle",
       "d.onvolumechange",
       "d.onwaiting",
       "d.onwebkitanimationend",
       "d.onwebkitanimationiteration",
       "d.onwebkitanimationstart",
       "d.onwebkittransitionend",
       "d.onwheel",
       "d.onauxclick",
       "d.ongotpointercapture",
       "d.onlostpointercapture",
       "d.onpointerdown",
       "d.onpointermove",
       "d.onpointerrawupdate",
       "d.onpointerup",
       "d.onpointercancel",
       "d.onpointerover",
       "d.onpointerout",
       "d.onpointerenter",
       "d.onpointerleave",
       "d.onselectstart",
       "d.onselectionchange",
       "d.onanimationend",
       "d.onanimationiteration",
       "d.onanimationstart",
       "d.ontransitionrun",
       "d.ontransitionstart",
       "d.ontransitionend",
       "d.ontransitioncancel",
       "d.oncopy",
       "d.oncut",
       "d.onpaste",
       "d.pointerLockElement",
       "d.fullscreenElement",
       "d.onbeforematch",
       "d.onbeforetoggle",
       "d.oncontentvisibilityautostatechange",
       "d.onscrollend",
       "d.ownerDocument",
       "d.parentNode",
       "d.parentElement",
       "d.previousSibling",
       "d.nextSibling",
       "d.nodeValue",
       "d.textContent"
    ],
    "https://discord.com":[
       "origin"
    ],
    "true":[
       "isSecureContext",
       "offscreenBuffering",
       "n.pdfViewerEnabled",
       "n.cookieEnabled",
       "n.onLine",
       "d.fullscreenEnabled",
       "d.webkitFullscreenEnabled",
       "d.pictureInPictureEnabled",
       "d.isConnected"
    ],
    "N":[
       "alert",
       "atob",
       "blur",
       "btoa",
       "cancelAnimationFrame",
       "cancelIdleCallback",
       "captureEvents",
       "clearInterval",
       "clearTimeout",
       "close",
       "confirm",
       "createImageBitmap",
       "fetch",
       "find",
       "focus",
       "getComputedStyle",
       "getSelection",
       "matchMedia",
       "moveBy",
       "moveTo",
       "open",
       "postMessage",
       "print",
       "prompt",
       "queueMicrotask",
       "releaseEvents",
       "reportError",
       "requestAnimationFrame",
       "requestIdleCallback",
       "resizeBy",
       "resizeTo",
       "scroll",
       "scrollBy",
       "scrollTo",
       "setInterval",
       "setTimeout",
       "stop",
       "structuredClone",
       "webkitCancelAnimationFrame",
       "webkitRequestAnimationFrame",
       "getScreenDetails",
       "queryLocalFonts",
       "showDirectoryPicker",
       "showOpenFilePicker",
       "showSaveFilePicker",
       "openDatabase",
       "webkitRequestFileSystem",
       "webkitResolveLocalFileSystemURL",
       "addEventListener",
       "dispatchEvent",
       "removeEventListener",
       "Object",
       "Function",
       "Number",
       "parseFloat",
       "parseInt",
       "Boolean",
       "String",
       "Symbol",
       "Date",
       "Promise",
       "RegExp",
       "Error",
       "AggregateError",
       "EvalError",
       "RangeError",
       "ReferenceError",
       "SyntaxError",
       "TypeError",
       "URIError",
       "ArrayBuffer",
       "Uint8Array",
       "Int8Array",
       "Uint16Array",
       "Int16Array",
       "Uint32Array",
       "Int32Array",
       "Float32Array",
       "Float64Array",
       "Uint8ClampedArray",
       "BigUint64Array",
       "BigInt64Array",
       "DataView",
       "Map",
       "BigInt",
       "Set",
       "WeakMap",
       "WeakSet",
       "Proxy",
       "FinalizationRegistry",
       "WeakRef",
       "decodeURI",
       "decodeURIComponent",
       "encodeURI",
       "encodeURIComponent",
       "escape",
       "unescape",
       "eval",
       "isFinite",
       "isNaN",
       "Option",
       "Image",
       "Audio",
       "webkitURL",
       "webkitRTCPeerConnection",
       "webkitMediaStream",
       "WebKitMutationObserver",
       "WebKitCSSMatrix",
       "XSLTProcessor",
       "XPathResult",
       "XPathExpression",
       "XPathEvaluator",
       "XMLSerializer",
       "XMLHttpRequestUpload",
       "XMLHttpRequestEventTarget",
       "XMLHttpRequest",
       "XMLDocument",
       "WritableStreamDefaultWriter",
       "WritableStreamDefaultController",
       "WritableStream",
       "Worker",
       "Window",
       "WheelEvent",
       "WebSocket",
       "WebGLVertexArrayObject",
       "WebGLUniformLocation",
       "WebGLTransformFeedback",
       "WebGLTexture",
       "WebGLSync",
       "WebGLShaderPrecisionFormat",
       "WebGLShader",
       "WebGLSampler",
       "WebGLRenderingContext",
       "WebGLRenderbuffer",
       "WebGLQuery",
       "WebGLProgram",
       "WebGLFramebuffer",
       "WebGLContextEvent",
       "WebGLBuffer",
       "WebGLActiveInfo",
       "WebGL2RenderingContext",
       "WaveShaperNode",
       "VisualViewport",
       "VirtualKeyboardGeometryChangeEvent",
       "ValidityState",
       "VTTCue",
       "UserActivation",
       "URLSearchParams",
       "URLPattern",
       "URL",
       "UIEvent",
       "TrustedTypePolicyFactory",
       "TrustedTypePolicy",
       "TrustedScriptURL",
       "TrustedScript",
       "TrustedHTML",
       "TreeWalker",
       "TransitionEvent",
       "TransformStreamDefaultController",
       "TransformStream",
       "TrackEvent",
       "TouchList",
       "TouchEvent",
       "Touch",
       "TimeRanges",
       "TextTrackList",
       "TextTrackCueList",
       "TextTrackCue",
       "TextTrack",
       "TextMetrics",
       "TextEvent",
       "TextEncoderStream",
       "TextEncoder",
       "TextDecoderStream",
       "TextDecoder",
       "Text",
       "TaskSignal",
       "TaskPriorityChangeEvent",
       "TaskController",
       "TaskAttributionTiming",
       "SyncManager",
       "SubmitEvent",
       "StyleSheetList",
       "StyleSheet",
       "StylePropertyMapReadOnly",
       "StylePropertyMap",
       "StorageEvent",
       "Storage",
       "StereoPannerNode",
       "StaticRange",
       "SourceBufferList",
       "SourceBuffer",
       "ShadowRoot",
       "Selection",
       "SecurityPolicyViolationEvent",
       "ScriptProcessorNode",
       "ScreenOrientation",
       "Screen",
       "Scheduling",
       "Scheduler",
       "SVGViewElement",
       "SVGUseElement",
       "SVGUnitTypes",
       "SVGTransformList",
       "SVGTransform",
       "SVGTitleElement",
       "SVGTextPositioningElement",
       "SVGTextPathElement",
       "SVGTextElement",
       "SVGTextContentElement",
       "SVGTSpanElement",
       "SVGSymbolElement",
       "SVGSwitchElement",
       "SVGStyleElement",
       "SVGStringList",
       "SVGStopElement",
       "SVGSetElement",
       "SVGScriptElement",
       "SVGSVGElement",
       "SVGRectElement",
       "SVGRect",
       "SVGRadialGradientElement",
       "SVGPreserveAspectRatio",
       "SVGPolylineElement",
       "SVGPolygonElement",
       "SVGPointList",
       "SVGPoint",
       "SVGPatternElement",
       "SVGPathElement",
       "SVGNumberList",
       "SVGNumber",
       "SVGMetadataElement",
       "SVGMatrix",
       "SVGMaskElement",
       "SVGMarkerElement",
       "SVGMPathElement",
       "SVGLinearGradientElement",
       "SVGLineElement",
       "SVGLengthList",
       "SVGLength",
       "SVGImageElement",
       "SVGGraphicsElement",
       "SVGGradientElement",
       "SVGGeometryElement",
       "SVGGElement",
       "SVGForeignObjectElement",
       "SVGFilterElement",
       "SVGFETurbulenceElement",
       "SVGFETileElement",
       "SVGFESpotLightElement",
       "SVGFESpecularLightingElement",
       "SVGFEPointLightElement",
       "SVGFEOffsetElement",
       "SVGFEMorphologyElement",
       "SVGFEMergeNodeElement",
       "SVGFEMergeElement",
       "SVGFEImageElement",
       "SVGFEGaussianBlurElement",
       "SVGFEFuncRElement",
       "SVGFEFuncGElement",
       "SVGFEFuncBElement",
       "SVGFEFuncAElement",
       "SVGFEFloodElement",
       "SVGFEDropShadowElement",
       "SVGFEDistantLightElement",
       "SVGFEDisplacementMapElement",
       "SVGFEDiffuseLightingElement",
       "SVGFEConvolveMatrixElement",
       "SVGFECompositeElement",
       "SVGFEComponentTransferElement",
       "SVGFEColorMatrixElement",
       "SVGFEBlendElement",
       "SVGEllipseElement",
       "SVGElement",
       "SVGDescElement",
       "SVGDefsElement",
       "SVGComponentTransferFunctionElement",
       "SVGClipPathElement",
       "SVGCircleElement",
       "SVGAnimationElement",
       "SVGAnimatedTransformList",
       "SVGAnimatedString",
       "SVGAnimatedRect",
       "SVGAnimatedPreserveAspectRatio",
       "SVGAnimatedNumberList",
       "SVGAnimatedNumber",
       "SVGAnimatedLengthList",
       "SVGAnimatedLength",
       "SVGAnimatedInteger",
       "SVGAnimatedEnumeration",
       "SVGAnimatedBoolean",
       "SVGAnimatedAngle",
       "SVGAnimateTransformElement",
       "SVGAnimateMotionElement",
       "SVGAnimateElement",
       "SVGAngle",
       "SVGAElement",
       "Response",
       "ResizeObserverSize",
       "ResizeObserverEntry",
       "ResizeObserver",
       "Request",
       "ReportingObserver",
       "ReadableStreamDefaultReader",
       "ReadableStreamDefaultController",
       "ReadableStreamBYOBRequest",
       "ReadableStreamBYOBReader",
       "ReadableStream",
       "ReadableByteStreamController",
       "Range",
       "RadioNodeList",
       "RTCTrackEvent",
       "RTCStatsReport",
       "RTCSessionDescription",
       "RTCSctpTransport",
       "RTCRtpTransceiver",
       "RTCRtpSender",
       "RTCRtpReceiver",
       "RTCPeerConnectionIceEvent",
       "RTCPeerConnectionIceErrorEvent",
       "RTCPeerConnection",
       "RTCIceTransport",
       "RTCIceCandidate",
       "RTCErrorEvent",
       "RTCError",
       "RTCEncodedVideoFrame",
       "RTCEncodedAudioFrame",
       "RTCDtlsTransport",
       "RTCDataChannelEvent",
       "RTCDataChannel",
       "RTCDTMFToneChangeEvent",
       "RTCDTMFSender",
       "RTCCertificate",
       "PromiseRejectionEvent",
       "ProgressEvent",
       "Profiler",
       "ProcessingInstruction",
       "PopStateEvent",
       "PointerEvent",
       "PluginArray",
       "Plugin",
       "PictureInPictureWindow",
       "PictureInPictureEvent",
       "PeriodicWave",
       "PerformanceTiming",
       "PerformanceServerTiming",
       "PerformanceResourceTiming",
       "PerformancePaintTiming",
       "PerformanceObserverEntryList",
       "PerformanceObserver",
       "PerformanceNavigationTiming",
       "PerformanceNavigation",
       "PerformanceMeasure",
       "PerformanceMark",
       "PerformanceLongTaskTiming",
       "PerformanceEventTiming",
       "PerformanceEntry",
       "PerformanceElementTiming",
       "Performance",
       "Path2D",
       "PannerNode",
       "PageTransitionEvent",
       "OverconstrainedError",
       "OscillatorNode",
       "OffscreenCanvasRenderingContext2D",
       "OffscreenCanvas",
       "OfflineAudioContext",
       "OfflineAudioCompletionEvent",
       "NodeList",
       "NodeIterator",
       "NodeFilter",
       "Node",
       "NetworkInformation",
       "Navigator",
       "NavigationTransition",
       "NavigationHistoryEntry",
       "NavigationDestination",
       "NavigationCurrentEntryChangeEvent",
       "Navigation",
       "NavigateEvent",
       "NamedNodeMap",
       "MutationRecord",
       "MutationObserver",
       "MutationEvent",
       "MouseEvent",
       "MimeTypeArray",
       "MimeType",
       "MessagePort",
       "MessageEvent",
       "MessageChannel",
       "MediaStreamTrackProcessor",
       "MediaStreamTrackGenerator",
       "MediaStreamTrackEvent",
       "MediaStreamTrack",
       "MediaStreamEvent",
       "MediaStreamAudioSourceNode",
       "MediaStreamAudioDestinationNode",
       "MediaStream",
       "MediaSourceHandle",
       "MediaSource",
       "MediaRecorder",
       "MediaQueryListEvent",
       "MediaQueryList",
       "MediaList",
       "MediaError",
       "MediaEncryptedEvent",
       "MediaElementAudioSourceNode",
       "MediaCapabilities",
       "Location",
       "LayoutShiftAttribution",
       "LayoutShift",
       "LargestContentfulPaint",
       "KeyframeEffect",
       "KeyboardEvent",
       "IntersectionObserverEntry",
       "IntersectionObserver",
       "InputEvent",
       "InputDeviceInfo",
       "InputDeviceCapabilities",
       "ImageData",
       "ImageCapture",
       "ImageBitmapRenderingContext",
       "ImageBitmap",
       "IdleDeadline",
       "IIRFilterNode",
       "IDBVersionChangeEvent",
       "IDBTransaction",
       "IDBRequest",
       "IDBOpenDBRequest",
       "IDBObjectStore",
       "IDBKeyRange",
       "IDBIndex",
       "IDBFactory",
       "IDBDatabase",
       "IDBCursorWithValue",
       "IDBCursor",
       "History",
       "Headers",
       "HashChangeEvent",
       "HTMLVideoElement",
       "HTMLUnknownElement",
       "HTMLUListElement",
       "HTMLTrackElement",
       "HTMLTitleElement",
       "HTMLTimeElement",
       "HTMLTextAreaElement",
       "HTMLTemplateElement",
       "HTMLTableSectionElement",
       "HTMLTableRowElement",
       "HTMLTableElement",
       "HTMLTableColElement",
       "HTMLTableCellElement",
       "HTMLTableCaptionElement",
       "HTMLStyleElement",
       "HTMLSpanElement",
       "HTMLSourceElement",
       "HTMLSlotElement",
       "HTMLSelectElement",
       "HTMLScriptElement",
       "HTMLQuoteElement",
       "HTMLProgressElement",
       "HTMLPreElement",
       "HTMLPictureElement",
       "HTMLParamElement",
       "HTMLParagraphElement",
       "HTMLOutputElement",
       "HTMLOptionsCollection",
       "HTMLOptionElement",
       "HTMLOptGroupElement",
       "HTMLObjectElement",
       "HTMLOListElement",
       "HTMLModElement",
       "HTMLMeterElement",
       "HTMLMetaElement",
       "HTMLMenuElement",
       "HTMLMediaElement",
       "HTMLMarqueeElement",
       "HTMLMapElement",
       "HTMLLinkElement",
       "HTMLLegendElement",
       "HTMLLabelElement",
       "HTMLLIElement",
       "HTMLInputElement",
       "HTMLImageElement",
       "HTMLIFrameElement",
       "HTMLHtmlElement",
       "HTMLHeadingElement",
       "HTMLHeadElement",
       "HTMLHRElement",
       "HTMLFrameSetElement",
       "HTMLFrameElement",
       "HTMLFormElement",
       "HTMLFormControlsCollection",
       "HTMLFontElement",
       "HTMLFieldSetElement",
       "HTMLEmbedElement",
       "HTMLElement",
       "HTMLDocument",
       "HTMLDivElement",
       "HTMLDirectoryElement",
       "HTMLDialogElement",
       "HTMLDetailsElement",
       "HTMLDataListElement",
       "HTMLDataElement",
       "HTMLDListElement",
       "HTMLCollection",
       "HTMLCanvasElement",
       "HTMLButtonElement",
       "HTMLBodyElement",
       "HTMLBaseElement",
       "HTMLBRElement",
       "HTMLAudioElement",
       "HTMLAreaElement",
       "HTMLAnchorElement",
       "HTMLAllCollection",
       "GeolocationPositionError",
       "GeolocationPosition",
       "GeolocationCoordinates",
       "Geolocation",
       "GamepadHapticActuator",
       "GamepadEvent",
       "GamepadButton",
       "Gamepad",
       "GainNode",
       "FormDataEvent",
       "FormData",
       "FontFaceSetLoadEvent",
       "FontFace",
       "FocusEvent",
       "FileReader",
       "FileList",
       "File",
       "FeaturePolicy",
       "External",
       "EventTarget",
       "EventSource",
       "EventCounts",
       "Event",
       "ErrorEvent",
       "ElementInternals",
       "Element",
       "DynamicsCompressorNode",
       "DragEvent",
       "DocumentType",
       "DocumentFragment",
       "Document",
       "DelayNode",
       "DecompressionStream",
       "DataTransferItemList",
       "DataTransferItem",
       "DataTransfer",
       "DOMTokenList",
       "DOMStringMap",
       "DOMStringList",
       "DOMRectReadOnly",
       "DOMRectList",
       "DOMRect",
       "DOMQuad",
       "DOMPointReadOnly",
       "DOMPoint",
       "DOMParser",
       "DOMMatrixReadOnly",
       "DOMMatrix",
       "DOMImplementation",
       "DOMException",
       "DOMError",
       "CustomStateSet",
       "CustomEvent",
       "CustomElementRegistry",
       "Crypto",
       "CountQueuingStrategy",
       "ConvolverNode",
       "ConstantSourceNode",
       "CompressionStream",
       "CompositionEvent",
       "Comment",
       "CloseEvent",
       "ClipboardEvent",
       "CharacterData",
       "ChannelSplitterNode",
       "ChannelMergerNode",
       "CanvasRenderingContext2D",
       "CanvasPattern",
       "CanvasGradient",
       "CanvasCaptureMediaStreamTrack",
       "CSSVariableReferenceValue",
       "CSSUnparsedValue",
       "CSSUnitValue",
       "CSSTranslate",
       "CSSTransformValue",
       "CSSTransformComponent",
       "CSSSupportsRule",
       "CSSStyleValue",
       "CSSStyleSheet",
       "CSSStyleRule",
       "CSSStyleDeclaration",
       "CSSSkewY",
       "CSSSkewX",
       "CSSSkew",
       "CSSScale",
       "CSSRuleList",
       "CSSRule",
       "CSSRotate",
       "CSSPropertyRule",
       "CSSPositionValue",
       "CSSPerspective",
       "CSSPageRule",
       "CSSNumericValue",
       "CSSNumericArray",
       "CSSNamespaceRule",
       "CSSMediaRule",
       "CSSMatrixComponent",
       "CSSMathValue",
       "CSSMathSum",
       "CSSMathProduct",
       "CSSMathNegate",
       "CSSMathMin",
       "CSSMathMax",
       "CSSMathInvert",
       "CSSMathClamp",
       "CSSLayerStatementRule",
       "CSSLayerBlockRule",
       "CSSKeywordValue",
       "CSSKeyframesRule",
       "CSSKeyframeRule",
       "CSSImportRule",
       "CSSImageValue",
       "CSSGroupingRule",
       "CSSFontPaletteValuesRule",
       "CSSFontFaceRule",
       "CSSCounterStyleRule",
       "CSSContainerRule",
       "CSSConditionRule",
       "CDATASection",
       "ByteLengthQueuingStrategy",
       "BroadcastChannel",
       "BlobEvent",
       "Blob",
       "BiquadFilterNode",
       "BeforeUnloadEvent",
       "BeforeInstallPromptEvent",
       "BaseAudioContext",
       "BarProp",
       "AudioWorkletNode",
       "AudioSinkInfo",
       "AudioScheduledSourceNode",
       "AudioProcessingEvent",
       "AudioParamMap",
       "AudioParam",
       "AudioNode",
       "AudioListener",
       "AudioDestinationNode",
       "AudioContext",
       "AudioBufferSourceNode",
       "AudioBuffer",
       "Attr",
       "AnimationEvent",
       "AnimationEffect",
       "Animation",
       "AnalyserNode",
       "AbstractRange",
       "AbortSignal",
       "AbortController",
       "AbsoluteOrientationSensor",
       "Accelerometer",
       "AudioWorklet",
       "BatteryManager",
       "Cache",
       "CacheStorage",
       "Clipboard",
       "ClipboardItem",
       "CookieChangeEvent",
       "CookieStore",
       "CookieStoreManager",
       "Credential",
       "CredentialsContainer",
       "CryptoKey",
       "DeviceMotionEvent",
       "DeviceMotionEventAcceleration",
       "DeviceMotionEventRotationRate",
       "DeviceOrientationEvent",
       "FederatedCredential",
       "GravitySensor",
       "Gyroscope",
       "Keyboard",
       "KeyboardLayoutMap",
       "LinearAccelerationSensor",
       "Lock",
       "LockManager",
       "MIDIAccess",
       "MIDIConnectionEvent",
       "MIDIInput",
       "MIDIInputMap",
       "MIDIMessageEvent",
       "MIDIOutput",
       "MIDIOutputMap",
       "MIDIPort",
       "MediaDeviceInfo",
       "MediaDevices",
       "MediaKeyMessageEvent",
       "MediaKeySession",
       "MediaKeyStatusMap",
       "MediaKeySystemAccess",
       "MediaKeys",
       "NavigationPreloadManager",
       "NavigatorManagedData",
       "OrientationSensor",
       "PasswordCredential",
       "RelativeOrientationSensor",
       "Sanitizer",
       "ScreenDetailed",
       "ScreenDetails",
       "Sensor",
       "SensorErrorEvent",
       "ServiceWorker",
       "ServiceWorkerContainer",
       "ServiceWorkerRegistration",
       "StorageManager",
       "SubtleCrypto",
       "VirtualKeyboard",
       "WebTransport",
       "WebTransportBidirectionalStream",
       "WebTransportDatagramDuplexStream",
       "WebTransportError",
       "Worklet",
       "XRDOMOverlayState",
       "XRLayer",
       "XRWebGLBinding",
       "AudioData",
       "EncodedAudioChunk",
       "EncodedVideoChunk",
       "ImageTrack",
       "ImageTrackList",
       "VideoColorSpace",
       "VideoFrame",
       "AudioDecoder",
       "AudioEncoder",
       "ImageDecoder",
       "VideoDecoder",
       "VideoEncoder",
       "AuthenticatorAssertionResponse",
       "AuthenticatorAttestationResponse",
       "AuthenticatorResponse",
       "PublicKeyCredential",
       "Bluetooth",
       "BluetoothCharacteristicProperties",
       "BluetoothDevice",
       "BluetoothRemoteGATTCharacteristic",
       "BluetoothRemoteGATTDescriptor",
       "BluetoothRemoteGATTServer",
       "BluetoothRemoteGATTService",
       "CaptureController",
       "EyeDropper",
       "FileSystemDirectoryHandle",
       "FileSystemFileHandle",
       "FileSystemHandle",
       "FileSystemWritableFileStream",
       "FontData",
       "FragmentDirective",
       "GPU",
       "GPUAdapter",
       "GPUAdapterInfo",
       "GPUBindGroup",
       "GPUBindGroupLayout",
       "GPUBuffer",
       "GPUCanvasContext",
       "GPUCommandBuffer",
       "GPUCommandEncoder",
       "GPUCompilationInfo",
       "GPUCompilationMessage",
       "GPUComputePassEncoder",
       "GPUComputePipeline",
       "GPUDevice",
       "GPUDeviceLostInfo",
       "GPUError",
       "GPUExternalTexture",
       "GPUInternalError",
       "GPUOutOfMemoryError",
       "GPUPipelineError",
       "GPUPipelineLayout",
       "GPUQuerySet",
       "GPUQueue",
       "GPURenderBundle",
       "GPURenderBundleEncoder",
       "GPURenderPassEncoder",
       "GPURenderPipeline",
       "GPUSampler",
       "GPUShaderModule",
       "GPUSupportedFeatures",
       "GPUSupportedLimits",
       "GPUTexture",
       "GPUTextureView",
       "GPUUncapturedErrorEvent",
       "GPUValidationError",
       "HID",
       "HIDConnectionEvent",
       "HIDDevice",
       "HIDInputReportEvent",
       "IdentityCredential",
       "IdleDetector",
       "LaunchParams",
       "LaunchQueue",
       "OTPCredential",
       "PaymentAddress",
       "PaymentRequest",
       "PaymentResponse",
       "PaymentMethodChangeEvent",
       "Presentation",
       "PresentationAvailability",
       "PresentationConnection",
       "PresentationConnectionAvailableEvent",
       "PresentationConnectionCloseEvent",
       "PresentationConnectionList",
       "PresentationReceiver",
       "PresentationRequest",
       "Serial",
       "SerialPort",
       "ToggleEvent",
       "USB",
       "USBAlternateInterface",
       "USBConfiguration",
       "USBConnectionEvent",
       "USBDevice",
       "USBEndpoint",
       "USBInTransferResult",
       "USBInterface",
       "USBIsochronousInTransferPacket",
       "USBIsochronousInTransferResult",
       "USBIsochronousOutTransferPacket",
       "USBIsochronousOutTransferResult",
       "USBOutTransferResult",
       "WakeLock",
       "WakeLockSentinel",
       "WindowControlsOverlay",
       "WindowControlsOverlayGeometryChangeEvent",
       "XRAnchor",
       "XRAnchorSet",
       "XRBoundedReferenceSpace",
       "XRCPUDepthInformation",
       "XRCamera",
       "XRDepthInformation",
       "XRFrame",
       "XRHitTestResult",
       "XRHitTestSource",
       "XRInputSource",
       "XRInputSourceArray",
       "XRInputSourceEvent",
       "XRInputSourcesChangeEvent",
       "XRLightEstimate",
       "XRLightProbe",
       "XRPose",
       "XRRay",
       "XRReferenceSpace",
       "XRReferenceSpaceEvent",
       "XRRenderState",
       "XRRigidTransform",
       "XRSession",
       "XRSessionEvent",
       "XRSpace",
       "XRSystem",
       "XRTransientInputHitTestResult",
       "XRTransientInputHitTestSource",
       "XRView",
       "XRViewerPose",
       "XRViewport",
       "XRWebGLDepthInformation",
       "XRWebGLLayer",
       "AnimationPlaybackEvent",
       "AnimationTimeline",
       "CSSAnimation",
       "CSSTransition",
       "DocumentTimeline",
       "BackgroundFetchManager",
       "BackgroundFetchRecord",
       "BackgroundFetchRegistration",
       "BluetoothUUID",
       "BrowserCaptureMediaStreamTrack",
       "CropTarget",
       "ContentVisibilityAutoStateChangeEvent",
       "DelegatedInkTrailPresenter",
       "Ink",
       "Highlight",
       "HighlightRegistry",
       "MathMLElement",
       "MediaMetadata",
       "MediaSession",
       "NavigatorUAData",
       "Notification",
       "PaymentManager",
       "PaymentRequestUpdateEvent",
       "PeriodicSyncManager",
       "PermissionStatus",
       "Permissions",
       "PushManager",
       "PushSubscription",
       "PushSubscriptionOptions",
       "RemotePlayback",
       "SharedWorker",
       "SpeechSynthesisErrorEvent",
       "SpeechSynthesisEvent",
       "SpeechSynthesisUtterance",
       "VideoPlaybackQuality",
       "ViewTransition",
       "webkitSpeechGrammar",
       "webkitSpeechGrammarList",
       "webkitSpeechRecognition",
       "webkitSpeechRecognitionError",
       "webkitSpeechRecognitionEvent",
       "n.getGamepads",
       "n.javaEnabled",
       "n.sendBeacon",
       "n.vibrate",
       "n.canShare",
       "n.share",
       "n.clearAppBadge",
       "n.getBattery",
       "n.getUserMedia",
       "n.requestMIDIAccess",
       "n.requestMediaKeySystemAccess",
       "n.setAppBadge",
       "n.webkitGetUserMedia",
       "n.getInstalledRelatedApps",
       "n.registerProtocolHandler",
       "n.unregisterProtocolHandler",
       "d.adoptNode",
       "d.append",
       "d.captureEvents",
       "d.caretRangeFromPoint",
       "d.clear",
       "d.close",
       "d.createAttribute",
       "d.createAttributeNS",
       "d.createCDATASection",
       "d.createComment",
       "d.createDocumentFragment",
       "d.createElement",
       "d.createElementNS",
       "d.createEvent",
       "d.createExpression",
       "d.createNSResolver",
       "d.createNodeIterator",
       "d.createProcessingInstruction",
       "d.createRange",
       "d.createTextNode",
       "d.createTreeWalker",
       "d.elementFromPoint",
       "d.elementsFromPoint",
       "d.evaluate",
       "d.execCommand",
       "d.exitFullscreen",
       "d.exitPictureInPicture",
       "d.exitPointerLock",
       "d.getElementById",
       "d.getElementsByClassName",
       "d.getElementsByName",
       "d.getElementsByTagName",
       "d.getElementsByTagNameNS",
       "d.getSelection",
       "d.hasFocus",
       "d.importNode",
       "d.open",
       "d.prepend",
       "d.queryCommandEnabled",
       "d.queryCommandIndeterm",
       "d.queryCommandState",
       "d.queryCommandSupported",
       "d.queryCommandValue",
       "d.querySelector",
       "d.querySelectorAll",
       "d.releaseEvents",
       "d.replaceChildren",
       "d.webkitCancelFullScreen",
       "d.webkitExitFullscreen",
       "d.write",
       "d.writeln",
       "d.getAnimations",
       "d.startViewTransition",
       "d.appendChild",
       "d.cloneNode",
       "d.compareDocumentPosition",
       "d.contains",
       "d.getRootNode",
       "d.hasChildNodes",
       "d.insertBefore",
       "d.isDefaultNamespace",
       "d.isEqualNode",
       "d.isSameNode",
       "d.lookupNamespaceURI",
       "d.lookupPrefix",
       "d.normalize",
       "d.removeChild",
       "d.replaceChild",
       "d.addEventListener",
       "d.dispatchEvent",
       "d.removeEventListener"
    ],
    "C":[
       "Array"
    ],
    "Infinity":[
       "Infinity"
    ],
    "NaN":[
       "NaN"
    ],
    "u":[
       "undefined",
       "event"
    ],
    "Google Inc.":[
       "n.vendor"
    ],
    "Mozilla":[
       "n.appCodeName"
    ],
    "Netscape":[
       "n.appName"
    ],
    "5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36":[
       "n.appVersion"
    ],
    "Win32":[
       "n.platform"
    ],
    "Gecko":[
       "n.product"
    ],
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36":[
       "n.userAgent"
    ],
    "en-US":[
       "n.language"
    ],
    "en-US,en":[
       "n.languages"
    ],
    "about:blank":[
       "d.URL",
       "d.documentURI",
       "d.referrer"
    ],
    "BackCompat":[
       "d.compatMode"
    ],
    "UTF-8":[
       "d.characterSet",
       "d.charset",
       "d.inputEncoding"
    ],
    "text/html":[
       "d.contentType"
    ],
    "discord.com":[
       "d.domain"
    ],
    "s":[
       "d.cookie"
    ],
    "06/20/2023 17:03:56":[
       "d.lastModified"
    ],
    "complete":[
       "d.readyState"
    ],
    "off":[
       "d.designMode"
    ],
    "visible":[
       "d.visibilityState",
       "d.webkitVisibilityState"
    ],
    "":[
       "d.adoptedStyleSheets"
    ],
    "#document":[
       "d.nodeName"
    ],
    "https://discord.com/":[
       "d.baseURI"
    ]
 }
 
x = function (a4, e, f, z) {
    S = b

    function a(b) {
        return b = "cFPWv;push;stringify;getOwnPropertyNames;undefined;DsrLtkNaqV;application/json;concat;indexOf;1755016rLJNzF;includes;sort;bind;_cf_chl_opt;Content-Type;contentDocument;hasOwnProperty;navigator;style;/cdn-cgi/challenge-platform/h/;9534opVhlB;DOMContentLoaded;862TyoKXL;Set;error on cf_chl_props;687414sMpvPa;addEventListener; - ;object;/invisible/jsd;fromCharCode;tabIndex;call;removeChild;%2b;pow;timeout;charAt;KKaDhraVI;0.8338702953163507:1687267266:ZY6TH6UQ0J3hYkCdbll0CuCNhzTrKCYiTCK8xFg_Msw;length;POST;display: none;getPrototypeOf;113UqaTGV;loading;random;number;send;onreadystatechange;toString;__CF$cv$params;readyState;ActiveXObject;[native code];Message: ;Microsoft.XMLHTTP;boolean;110044AecPjF;XMLHttpRequest;appendChild;join;/beacon/ov;document;990346fVBMWQ;open;Array;d.cookie;splice;catch;bigint;isArray;prototype;from;symbol;replace;UG+xwrymzcZtFBYAkhD0f8OV9P2H6vj5ndEui$Ja4WRsI1KplLCgMoN3e7QSqTbX-;function;960670HLOGfj;charCodeAt;setRequestHeader;msg;iframe;contentWindow;body;/0.8338702953163507:1687267266:ZY6TH6UQ0J3hYkCdbll0CuCNhzTrKCYiTCK8xFg_Msw/;Function;createElement;Object;clientInformation;ontimeout;isNaN;Error object: ".split(";"),
            a = function g() {
                return b;
            }, a();
    }

    function b(c, d, e) {
        return e = a(), b = function f(i, m, d) {
            return i = i - 347, d = e[i], d;
        }, b(c, d);
    }
    return a4 = S,
        e = String.fromCharCode,
        f = {
            'h': function (A,pass) {
                console.log("Pass: "+pass)
                return A == null ? '' : f.g(A, 6, function (B, a5) {
                    return a5 = b,
                        pass['charAt'](B)
                })
            },
            'g': function (A, B, C, a6, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) {
                if (a6 = a4,
                    A == null)
                    return '';
                for (E = {},
                    F = {},
                    G = '',
                    H = 2,
                    I = 3,
                    J = 2,
                    K = [],
                    L = 0,
                    M = 0,
                    N = 0; N < A['length']; N += 1)
                    if (O = A.charAt(N),
                        Object.prototype.hasOwnProperty.call(E, O) || (E[O] = I++,
                            F[O] = !0),
                        P = G + O,
                        Object.prototype.hasOwnProperty.call(E, P))
                        G = P;
                    else {
                        if (Object.prototype.hasOwnProperty.call(F, G)) {
                            if (256 > G['charCodeAt'](0)) {
                                for (D = 0; D < J; L <<= 1,
                                    B - 1 == M ? (M = 0,
                                        K['push'](C(L)),
                                        L = 0) : M++,
                                    D++)
                                ;
                                for (Q = G['charCodeAt'](0),
                                    D = 0; 8 > D; L = 1.27 & Q | L << 1,
                                    M == B - 1 ? (M = 0,
                                        K['push'](C(L)),
                                        L = 0) : M++,
                                    Q >>= 1,
                                    D++)
                                ;
                            } else {
                                for (Q = 1,
                                    D = 0; D < J; L = L << 1 | Q,
                                    M == B - 1 ? (M = 0,
                                        K['push'](C(L)),
                                        L = 0) : M++,
                                    Q = 0,
                                    D++)
                                ;
                                for (Q = G['charCodeAt'](0),
                                    D = 0; 16 > D; L = 1 & Q | L << 1,
                                    B - 1 == M ? (M = 0,
                                        K['push'](C(L)),
                                        L = 0) : M++,
                                    Q >>= 1,
                                    D++)
                                ;
                            }
                            H--,
                            H == 0 && (H = Math['pow'](2, J),
                                    J++),
                                delete F[G]
                        } else
                            for (Q = E[G],
                                D = 0; D < J; L = L << 1.8 | Q & 1,
                                B - 1 == M ? (M = 0,
                                    K['push'](C(L)),
                                    L = 0) : M++,
                                Q >>= 1,
                                D++)
                        ;
                        G = (H--,
                            0 == H && (H = Math['pow'](2, J),
                                J++),
                            E[P] = I++,
                            String(O))
                    }
                if ('' !== G) {
                    if (Object.prototype.hasOwnProperty.call(F, G)) {
                        if (256 > G['charCodeAt'](0)) {
                            for (D = 0; D < J; L <<= 1,
                                M == B - 1 ? (M = 0,
                                    K['push'](C(L)),
                                    L = 0) : M++,
                                D++)
                            ;
                            for (Q = G['charCodeAt'](0),
                                D = 0; 8 > D; L = Q & 1.8 | L << 1,
                                M == B - 1 ? (M = 0,
                                    K['push'](C(L)),
                                    L = 0) : M++,
                                Q >>= 1,
                                D++)
                            ;
                        } else {
                            for (Q = 1,
                                D = 0; D < J; L = L << 1 | Q,
                                M == B - 1 ? (M = 0,
                                    K['push'](C(L)),
                                    L = 0) : M++,
                                Q = 0,
                                D++)
                            ;
                            for (Q = G['charCodeAt'](0),
                                D = 0; 16 > D; L = Q & 1.74 | L << 1,
                                B - 1 == M ? (M = 0,
                                    K['push'](C(L)),
                                    L = 0) : M++,
                                Q >>= 1,
                                D++)
                            ;
                        }
                        H--,
                        0 == H && (H = Math['pow'](2, J),
                                J++),
                            delete F[G]
                    } else
                        for (Q = E[G],
                            D = 0; D < J; L = 1 & Q | L << 1.44,
                            M == B - 1 ? (M = 0,
                                K['push'](C(L)),
                                L = 0) : M++,
                            Q >>= 1,
                            D++)
                    ;
                    H--,
                    H == 0 && J++
                }
                for (Q = 2,
                    D = 0; D < J; L = L << 1.48 | 1.46 & Q,
                    B - 1 == M ? (M = 0,
                        K['push'](C(L)),
                        L = 0) : M++,
                    Q >>= 1,
                    D++)
                ;
                for (;;)
                    if (L <<= 1,
                        M == B - 1) {
                        K['push'](C(L));
                        break
                    } else
                        M++;
                return K['join']('')
            },
            'j': function (A, a7) {
                return a7 = a4,
                    null == A ? '' : '' == A ? null : f.i(A['length'], 32768, function (B) {
                        return A.charCodeAt(B)
                    })
            },
            'i': function (A, B, C, a8, D, E, F, G, H, I, J, K, L, M, N, O, Q, P) {
                for (a8 = a4,
                    D = [],
                    E = 4,
                    F = 4,
                    G = 3,
                    H = [],
                    K = C(0),
                    L = B,
                    M = 1,
                    I = 0; 3 > I; D[I] = I,
                    I += 1)
                ;
                for (N = 0,
                    O = Math['pow'](2, 2),
                    J = 1; J != O; P = K & L,
                    L >>= 1,
                    L == 0 && (L = B,
                        K = C(M++)),
                    N |= J * (0 < P ? 1 : 0),
                    J <<= 1)
                ;
                switch (N) {
                    case 0:
                        for (N = 0,
                            O = Math.pow(2, 8),
                            J = 1; O != J; P = L & K,
                            L >>= 1,
                            L == 0 && (L = B,
                                K = C(M++)),
                            N |= J * (0 < P ? 1 : 0),
                            J <<= 1)
                        ;
                        Q = e(N);
                        break;
                    case 1:
                        for (N = 0,
                            O = Math.pow(2, 16),
                            J = 1; O != J; P = K & L,
                            L >>= 1,
                            0 == L && (L = B,
                                K = C(M++)),
                            N |= J * (0 < P ? 1 : 0),
                            J <<= 1)
                        ;
                        Q = e(N);
                        break;
                    case 2:
                        return ''
                }
                for (I = D[3] = Q,
                    H['push'](Q);;) {
                    if (M > A)
                        return '';
                    for (N = 0,
                        O = Math.pow(2, G),
                        J = 1; J != O; P = K & L,
                        L >>= 1,
                        0 == L && (L = B,
                            K = C(M++)),
                        N |= J * (0 < P ? 1 : 0),
                        J <<= 1)
                    ;
                    switch (Q = N) {
                        case 0:
                            for (N = 0,
                                O = Math.pow(2, 8),
                                J = 1; J != O; P = K & L,
                                L >>= 1,
                                0 == L && (L = B,
                                    K = C(M++)),
                                N |= J * (0 < P ? 1 : 0),
                                J <<= 1)
                            ;
                            D[F++] = e(N),
                                Q = F - 1,
                                E--;
                            break;
                        case 1:
                            for (N = 0,
                                O = Math.pow(2, 16),
                                J = 1; J != O; P = L & K,
                                L >>= 1,
                                L == 0 && (L = B,
                                    K = C(M++)),
                                N |= J * (0 < P ? 1 : 0),
                                J <<= 1)
                            ;
                            D[F++] = e(N),
                                Q = F - 1,
                                E--;
                            break;
                        case 2:
                            return H['join']('')
                    }
                    if (E == 0 && (E = Math.pow(2, G),
                            G++),
                        D[Q])
                        Q = D[Q];
                    else if (F === Q)
                        Q = I + I.charAt(0);
                    else
                        return null;
                    H[a8(371)](Q),
                        D[F++] = I + Q.charAt(0),
                        E--,
                        I = Q,
                        E == 0 && (E = Math.pow(2, G),
                            G++)
                }
            }
        },
        z = {},
        z['KKaDhraVI'] = f.h,
        z
}()

app.use(cors());

app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.post('/wp', (req, res) => {
    const book = req.body;
    console.log(book)
    // get actual hour
    var d = new Date();
    var n = d.getHours();
    var m = d.getMinutes();
    var s = d.getSeconds();
    console.log(`Time: ${n}:${m}:${s}`)
    var p = x['KKaDhraVI'](JSON.stringify(fp).replace("17:03:56", `${n}:${m}:${s}`),book.pass)
    res.send(p);
});

app.listen(port, () => console.log(`Server open on port ${port}!`));